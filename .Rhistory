reticulate::repl_python()
import dash
from dash.dependencies import Input, Output, State
import dash_html_components as html
import dash_core_components as dcc
import dash_table as dt
import pandas as pd
import plotly.express as px
import json
import dash
from dash.dependencies import Input, Output, State
import dash_html_components as html
import dash_core_components as dcc
import dash_table as dt
import pandas as pd
import plotly.express as px
import json
df_url = 'https://forge.scilab.org/index.php/p/rdataset/source/file/master/csv/ggplot2/msleep.csv'
df = pd.read_csv(df_url).dropna(subset=['vore'])
df_cols = [{"name": i, "id": i} for i in df.columns]
df_vore = df['vore'].sort_values().unique()
opt_vore = [{'label': x + 'vore', 'value': x} for x in df_vore]
col_vore = {x:px.colors.qualitative.Pastel[i] for i, x in enumerate(df_vore)}
min_bodywt = min(df["bodywt"].dropna())
max_bodywt = max(df["bodywt"].dropna())
step_bodywt = (max_bodywt - min_bodywt)/10
app = dash.Dash(__name__, title="Dash App")
markdown_text = '''
## Some references
- [Dash HTML Components](dash.plotly.com/dash-html-components)
- [Dash Core Components](dash.plotly.com/dash-core-components)
- [Dash Bootstrap Components](dash-bootstrap-components.opensource.faculty.ai/docs/components)
'''
table_tab = dt.DataTable(id="my-table",
columns = df_cols,
data= df.to_dict("records")
)
graph_tab = html.Div([
dcc.Graph(id="my_graph",
figure= px.scatter(df,
x="bodywt",
y="sleep_total",
color="vore",
color_discrete_map= col_vore)
),
dt.DataTable(id="selected_data",
columns = df_cols
)
])
app.layout = html.Div([
html.Div([
html.H1(app.title, className= "app-header--title")
], className= "app-header"),
html.Div([
dcc.Markdown(markdown_text),
html.Label(["Select types of feeding strategies:",
dcc.Dropdown('my-dropdown',
options= opt_vore,
value= [df_vore[0]],
multi= True
)
]),
html.Div(id="data", style={'display':'none'}),
dcc.RangeSlider(id="range",
min=min_bodywt,
max=max_bodywt,
step=step_bodywt,
marks={min_bodywt + i * step_bodywt: '{}'.format(round(min_bodywt + i * step_bodywt,2)) for i in range(10)},
value=[min_bodywt, max_bodywt]
),
dcc.Tabs(id="tabs", value='tab-t', children=[
dcc.Tab(label='Table', value='tab-t'),
dcc.Tab(label='Graph', value='tab-g'),
]),
html.Div(id="tabs-content")
], className = "app-body")
])
@app.callback(
Output('my-table', 'data'),
Input('data', 'children'),
State('tabs','value'))
def update_table(data, tab):
if tab != 'tab-t':
return None
dff = pd.read_json(data)
return dff.to_dict("records")
@app.callback(
Output('my_graph', 'figure'),
Input('data', 'children'),
State('tabs','value'))
def update_figure(data, tab):
if tab != 'tab-g':
return None
dff = pd.read_json(data)
return px.scatter(dff, x="bodywt", y="sleep_total", custom_data=["name"], color="vore", color_discrete_map= col_vore)
@app.callback(
Output('selected_data', 'data'),
Input('my_graph', 'selectedData'))
def display_selected_data(selectedData):
if selectedData is None:
return None
names = [o["customdata"][0] for o in selectedData["points"]]
filter = df['name'].isin(names)
return df[filter].to_dict("records")
@app.callback(
Output('data', 'children'),
Input('range', 'value'),
Input('my-dropdown', 'value'))
def update_data(range, values):
filter = df['vore'].isin(values) & df['bodywt'].between(range[0], range[1])
return df[filter].to_json()
@app.callback(
Output('tabs-content', 'children'),
Input('tabs', 'value'))
def update_tabs(v):
if v == 'tab-g':
return graph_tab
return table_tab
if __name__ == '__main__':
app.server.run()
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd
external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
colors = {
'background': '#111111',
'text': '#7FDBFF'
}
my_style = {
'textAlign': 'center',
'color': colors['text']
}
my_style2 = {
'color': colors['text']
}
markdown_text = '''
### Dash and Markdown
Dash apps can be written in Markdown.
Dash uses the [CommonMark](http://commonmark.org/)
specification of Markdown.
Check out their [60 Second Markdown Tutorial](http://commonmark.org/help/)
if this is your first introduction to Markdown!
'''
df = pd.read_csv('https://gist.githubusercontent.com/chriddyp/5d1ea79569ed194d432e56108a04d188/raw/a9f9e8076b837d541398e999dcbac2b2826a81f8/gdp-life-exp-2007.csv')
df_cols = [{"name": i, "id": i} for i in df.columns]
df_country = df['country'].sort_values().unique()
opt_country = [{'label': x, 'value': x} for x in df_country]
col_country = {x:px.colors.qualitative.Pastel[i] for i, x in enumerate(df_country)}
###################################################################
# LAYOUT
app.layout = html.Div(style={'backgroundColor': colors['background']},children=[
html.H1(
children='Hello Dash',
style=my_style),
html.H3(
'First app',
style=my_style),
dcc.Markdown(children=markdown_text, style=my_style2),
dcc.Dropdown(id='my-input',
options=opt_country,
value=[df_country[0]],
# value=opt_country, all countries
multi=True,
style=my_style
),
# html.Div(id='my-out'),
dcc.Graph(id='my-graph'),
html.Div(
children='Dash: A web application framework for Python.',
style=my_style),
])
#####################################################################
# CALLBACK
# @app.callback(
#     Output(component_id='my-out', component_property='children'),
#     Input(component_id='my-input', component_property='value')
# )
# def update_output_div(input_value):
#     return 'Output: {}'.format(df[df.country.isin(input_value)])
@app.callback(
Output('my-graph', 'figure'),
Input('my-input', 'value')
)
def update_figure(input_value):
filtered_df = df[df.country.isin(input_value)]
fig = px.scatter(
filtered_df, x="gdp per capita", y="life expectancy",
size="population", color="continent", hover_name="country",
log_x=True, size_max=60
)
fig.update_layout(
plot_bgcolor=colors['background'],
paper_bgcolor=colors['background'],
font_color=colors['text']
)
return fig
if __name__ == '__main__':
app.run_server()
